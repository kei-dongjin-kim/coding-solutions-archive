package leetcode;

public class P0629 {

    static final int MOD = 1_000_000_007;

    // n = 3, k = 0
    // 1 2 3 => found
    // 1 3 2
    // 2 1 3
    // 2 3 1
    // 3 1 2
    // 3 2 1

    // n = 3, k = 1, result = 2 -----------------------------------------------
    // 1 2 3
    // 1 3 2 => found
    // 2 1 3 => found
    // 2 3 1
    // 3 1 2
    // 3 2 1

    // dp table
    //   0 1
    // 0 1 0
    // 1 1 1
    // 2 1 2
    // 3 1 2

    // n = 3, k = 2, result = 2 -----------------------------------------------
    // 1 2 3
    // 1 3 2
    // 2 1 3
    // 2 3 1 => found
    // 3 1 2 => found
    // 3 2 1

    // dp table
    //   0 1 2
    // 0 1 0 0
    // 1 1 1 0
    // 2 1 2 1
    // 3 1 2 2

    // n = 3, k = 3, result = 1 -----------------------------------------------
    // 1 2 3
    // 1 3 2
    // 2 1 3
    // 2 3 1
    // 3 1 2
    // 3 2 1 => found

    // dp table
    //   0 1 2 3
    // 0 1 0 0 0
    // 1 1 1 0 0
    // 2 1 2 1 0
    // 3 1 2 2 1

    // n = 5, k = 3, result = 5 -----------------------------------------------

    // dp table
    //   0 1 2 3
    // 0 1 0 0 0
    // 1 1 1 0 0
    // 2 1 2 1 0
    // 3 1 2 2 1
    // 4 1 2 3 3
    // 5 1 2 4 5

    public static int kInversePairs(int n, int k) {
        int[][] dp = new int[n+1][k+1];

        for (int[] row : dp) {
            row[0] = 1;
        }

        for (int i=1 ; i<=n ; i++) {
            for (int j=1 ; j<=k ; j++) {
                dp[i][j] = (dp[i][j-1] + dp[i-1][j]) % MOD;
                if (j >= i) {
                    dp[i][j] = (dp[i][j] - dp[i-1][j-i] + MOD) % MOD;
                }
            }
        }

        return dp[n][k];
    }
}
